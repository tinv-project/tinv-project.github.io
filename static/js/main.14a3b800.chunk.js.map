{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","utils/multicall.ts","config/constants/contracts.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","contexts/Localisation/translationsContext.ts","state/hooks.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","nonStandard","lpQuote","calls2","alt1","alt2","tokenAltBalanceLP","quoteAltTokenBlanceLP","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","TINVSPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","useEffect","interval","setInterval","prev","clearInterval","Provider","value","useRefresh","useContext","fastRefresh","slowRefresh","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","i","decodeFunctionResult","cake","56","97","bee","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","getCakeAddress","addresses","chainId","getBeeAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingTinvs","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","concat","Menu","props","useWallet","connect","reset","cakePriceUsd","usePriceCakeBusd","beePriceUsd","usePriceBeeBusd","login","logout","currentLang","langs","setLang","links","beePriceLink","priceLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","useRef","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","useFetchPublicData","Global","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","block","setBlock","getBlockNumber","blockNumber","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState","ZERO","useDispatch","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","bnbPriceUSD","useTotalValue","bnbPrice","cakePrice","val","CAKE","plus"],"mappings":"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","file":"static/js/main.14a3b800.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAltBalanceLP\r\n      let quoteAltTokenBlanceLP\r\n\r\n      if(farmConfig.nonStandard){\r\n        const lpQuote = farmConfig.lpAddresses[97]\r\n        const calls2 = [\r\n          // Balance of token in the LP contract\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpQuote],\r\n          },\r\n          // Balance of quote token on LP contract\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpQuote],\r\n          },\r\n        ]\r\n\r\n        const [\r\n          alt1,\r\n          alt2,\r\n        ] = await multicall(erc20, calls2)\r\n\r\n        tokenAltBalanceLP = alt1\r\n        quoteAltTokenBlanceLP = alt2\r\n      }\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n\r\n      if(farmConfig.isTokenOnly && farmConfig.nonStandard){\r\n\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n\r\n      }else if(farmConfig.isTokenOnly){\r\n\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n\r\n      }else if(farmConfig.nonStandard){\r\n\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteAltTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenAltBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteAltTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(tokenAltBalanceLP));\r\n        }\r\n\r\n      }else{\r\n\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        \r\n      }\r\n\r\n      const [info, totalAllocPoint, TINVSPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'TINVSPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        TINVSPerBlock: new BigNumber(TINVSPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingTinvs',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  nonStandard?: boolean\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","export default {\r\n  cake: {\r\n    56: '0xc3cabc1f565c88bdd416cfd65379f69e4ded649b',\r\n    97: '',\r\n  },\r\n  bee: {\r\n    56: '0xF20cE5F76efd7B68d038234CE1fe5b9B380f1740',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0x60E2D2732bfB34a20ed931C200eBc86F6516b373',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n}","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getBeeAddress = () => {\r\n  return addresses.bee[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingTinvs('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'TINvS-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x96CF623aC669440BC5ef58b92B8c7604Df51864F',\r\n    },\r\n    tokenSymbol: 'TINVS',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xc3cabc1f565c88bdd416cfd65379f69e4ded649b',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 5,\r\n    lpSymbol: 'TINvS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5d5962150c0Cba39e2d3B0D4fE15909E2bAc177b',\r\n    },\r\n    tokenSymbol: 'TINVS',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xc3cabc1f565c88bdd416cfd65379f69e4ded649b',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n  {\r\n    pid: 2,\r\n    risk: 3,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    \r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1B96B92314C44b159149f7E0303511fB2Fc4774f',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 3,\r\n    risk: 5,\r\n    lpSymbol: 'TINV-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xDbEfCc2F5a3AC23396cF59A850c3A310fcBAcCb3',\r\n    },\r\n    tokenSymbol: 'TINV',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xF20cE5F76efd7B68d038234CE1fe5b9B380f1740',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 8,\r\n    risk: 3,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    \r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  // Start Single Pools--------------------------------------------------------------------------\r\n  {\r\n    pid: 4,\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'TINVs',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x96CF623aC669440BC5ef58b92B8c7604Df51864F', // EGG-BUSD LP (BUSD-BUSD will ignore)\r\n    },\r\n    tokenSymbol: 'TINVs',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xc3cabc1f565c88bdd416cfd65379f69e4ded649b',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 5,\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'TINV',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xDbEfCc2F5a3AC23396cF59A850c3A310fcBAcCb3', // TINV-BNB LP\r\n    },\r\n    tokenSymbol: 'TINV',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xF20cE5F76efd7B68d038234CE1fe5b9B380f1740',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 6,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'WBNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\r\n    },\r\n    tokenSymbol: 'WBNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 7,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 9,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'ETH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7213a321F1855CF1779f42c0CD85d3D95291D34C', // ETH-BUSD LP\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 10,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'USDC',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1', // USDC-BUSD LP\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 11,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56', // BUSD\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  // {\r\n  //   pid: 3,\r\n  //   risk: 1,\r\n  //   lpSymbol: 'TINV-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xDbEfCc2F5a3AC23396cF59A850c3A310fcBAcCb3',\r\n  //   },\r\n  //   tokenSymbol: 'USDT',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x55d398326f99059ff775485246999027b3197955',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 13,\r\n  //   risk: 1,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'TINV',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP (BUSD-BUSD will ignore)\r\n  //   },\r\n  //   tokenSymbol: 'BUSD',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 4,\r\n  //   risk: 2,\r\n  //   lpSymbol: 'BTCB-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7561eee90e24f3b348e1087a005f78b4c8453524',\r\n  //   },\r\n  //   tokenSymbol: 'BTCB',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 5,\r\n  //   risk: 2,\r\n  //   lpSymbol: 'ETH-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\r\n  //   },\r\n  //   tokenSymbol: 'ETH',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 6,\r\n  //   risk: 1,\r\n  //   lpSymbol: 'DAI-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc',\r\n  //   },\r\n  //   tokenSymbol: 'DAI',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 7,\r\n  //   risk: 1,\r\n  //   lpSymbol: 'USDC-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\r\n  //   },\r\n  //   tokenSymbol: 'USDC',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 9,\r\n  //   risk: 3,\r\n  //   lpSymbol: 'DOT-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\r\n  //   },\r\n  //   tokenSymbol: 'DOT',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 10,\r\n  //   risk: 4,\r\n  //   lpSymbol: 'CAKE-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458',\r\n  //   },\r\n  //   tokenSymbol: 'CAKE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 11,\r\n  //   risk: 4,\r\n  //   lpSymbol: 'CAKE-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xa527a61703d82139f8a06bc30097cc9caa2df5a6',\r\n  //   },\r\n  //   tokenSymbol: 'CAKE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 12,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'EGG',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'EGG',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xf952fc3ca7325cc27d15885d37117676d25bfda6',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 14,\r\n  //   risk: 3,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'WBNB',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'WBNB',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 15,\r\n  //   risk: 1,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'USDT',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd', // USDT-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'USDT',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x55d398326f99059ff775485246999027b3197955',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 16,\r\n  //   risk: 2,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'BTCB',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'BTCB',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 17,\r\n  //   risk: 2,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'ETH',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'ETH',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 18,\r\n  //   risk: 1,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'DAI',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc', // DAI-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'DAI',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 19,\r\n  //   risk: 1,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'USDC',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18', // USDC-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'USDC',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 20,\r\n  //   risk: 3,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'DOT',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'DOT',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 21,\r\n  //   risk: 4,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'CAKE',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'CAKE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 22,\r\n  //   risk: 3,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'BSCX',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xa32a983a64ce21834221aa0ad1f1533907553136', // BSCX-BUSD LP\r\n  //   },\r\n  //   tokenSymbol: 'BSCX',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x5ac52ee5b2a633895292ff6d8a89bb9190451587',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 23,\r\n  //   risk: 3,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'AUTO',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // AUTO-BNB LP\r\n  //   },\r\n  //   tokenSymbol: 'AUTO',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xa184088a740c695e156f91f5cc086a06bb78b827',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n]\r\n\r\nexport default farms\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from 'tinvs-uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from 'tinvs-uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from 'tinvs-uikit'\r\nimport { getCakeAddress, getBeeAddress } from 'utils/addressHelpers'\r\n\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://exchange.pancakeswap.finance/#/swap' ,\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://exchange.pancakeswap.finance/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Shops',\r\n    icon: 'PoolIcon',\r\n    href: '/Shops',\r\n  },\r\n  // {\r\n  //   label: 'Pools',\r\n  //   icon: 'PoolIcon',\r\n  //   href: '/pools',\r\n  // },\r\n  // {\r\n  //   label: 'Lottery',\r\n  //   icon: 'TicketIcon',\r\n  //   href: '/lottery',\r\n  // },\r\n  // {\r\n  //   label: 'NFT',\r\n  //   icon: 'NftIcon',\r\n  //   href: '/nft',\r\n  // },\r\n  {\r\n    label: 'Info',\r\n    icon: 'InfoIcon',\r\n    items: [\r\n      {\r\n        label: 'TINVS on PancakeSwap',\r\n        href: 'https://pancakeswap.info/token/'.concat(getCakeAddress()),\r\n      },\r\n      {\r\n        label: 'TINV on PancakeSwap',\r\n        href: 'https://pancakeswap.info/token/'.concat(getBeeAddress()),\r\n      },\r\n      // {\r\n      //   label: 'PancakeSwap',\r\n      //   href: 'https://pancakeswap.info/token/0xF952Fc3ca7325Cc27D15885d37117676d25BfdA6',\r\n      // },\r\n      // {\r\n      //   label: 'CoinGecko',\r\n      //   href: 'https://www.coingecko.com/en/coins/goose-finance',\r\n      // },\r\n      // {\r\n      //   label: 'CoinMarketCap',\r\n      //   href: 'https://coinmarketcap.com/currencies/goose-finance/',\r\n      // },\r\n\r\n    ],\r\n  },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: 'Github',\r\n        href: 'https://github.com/tinv-project/',\r\n      },\r\n      // {\r\n      //   label: 'Docs',\r\n      //   href: 'https://goosedefi.gitbook.io/goose-finance/',\r\n      // },\r\n      // {\r\n      //   label: 'Blog',\r\n      //   href: 'https://goosefinance.medium.com/',\r\n      // },\r\n    ],\r\n  },\r\n  // {\r\n  //   label: 'Partnerships/IFO',\r\n  //   icon: 'GooseIcon',\r\n  //   href: 'https://docs.google.com/forms/d/e/1FAIpQLSe7ycrw8Dq4C5Vjc9WNlRtTxEhFDB1Ny6jlAByZ2Y6qBo7SKg/viewform?usp=sf_link',\r\n  // },\r\n\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd, usePriceBeeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from 'tinvs-uikit'\r\nimport config from './config'\r\nimport { getCakeAddress, getBeeAddress } from '../../utils/addressHelpers'\r\n\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  const beePriceUsd = usePriceBeeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      beePriceUsd={ beePriceUsd.toNumber() }\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      beePriceLink=\"https://www.coingecko.com/en/coins/tinville\"\r\n      priceLink={ \"https://poocoin.app/tokens/\".concat( getCakeAddress() ) }\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from 'tinvs-uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { Nft } from './types'\r\n\r\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\r\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n    previewImage: 'swapsies-preview.png',\r\n    blurImage: 'swapsies-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n    previewImage: 'drizzle-preview.png',\r\n    blurImage: 'drizzle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n    previewImage: 'blueberries-preview.png',\r\n    blurImage: 'blueberries-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n    previewImage: 'circular-preview.png',\r\n    blurImage: 'circular-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n    previewImage: 'sparkle-preview.png',\r\n    blurImage: 'sparkle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from 'tinvs-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from 'tinvs-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/shops\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from 'tinvs-uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // HNY-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const usePriceBeeBusd = (): BigNumber => {\r\n  const bnbPriceUSD = new BigNumber(usePriceBnbBusd())\r\n  const pid = 3\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    console.log(\"PID: \".concat(farms[i].pid.toString()))\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n      console.log(\"VAL: \".concat(val))\r\n    }\r\n  }\r\n  return value;\r\n}"],"sourceRoot":""}